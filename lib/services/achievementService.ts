import { doc, getDoc, setDoc, updateDoc, collection, getDocs } from "firebase/firestore"
import { db } from "@/lib/firebase/config"
import type { Achievement, UserAchievements, UserAchievement } from "@/types/achievements"

export class AchievementService {
  private static achievements: Achievement[] = [
    // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (common)
    {
      id: "first_game_created",
      title: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
      description: "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É",
      icon: "üéÆ",
      category: "games",
      rarity: "common",
      points: 10,
      condition: { type: "games_created", value: 1 },
      isSecret: false,
    },
    {
      id: "first_game_played",
      title: "–î–µ–±—é—Ç–∞–Ω—Ç",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É",
      icon: "üéØ",
      category: "participation",
      rarity: "common",
      points: 5,
      condition: { type: "games_played", value: 1 },
      isSecret: false,
    },
    {
      id: "first_correct_answer",
      title: "–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å",
      description: "–î–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
      icon: "‚úÖ",
      category: "score",
      rarity: "common",
      points: 5,
      condition: { type: "correct_answers", value: 1 },
      isSecret: false,
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è (common-rare)
    {
      id: "games_played_5",
      title: "–ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ 5 –∏–≥—Ä",
      icon: "üé≤",
      category: "participation",
      rarity: "common",
      points: 25,
      condition: { type: "games_played", value: 5 },
      isSecret: false,
    },
    {
      id: "games_played_25",
      title: "–í–µ—Ç–µ—Ä–∞–Ω",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ 25 –∏–≥—Ä",
      icon: "üèÜ",
      category: "participation",
      rarity: "rare",
      points: 100,
      condition: { type: "games_played", value: 25 },
      isSecret: false,
    },
    {
      id: "games_played_100",
      title: "–õ–µ–≥–µ–Ω–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ 100 –∏–≥—Ä",
      icon: "üëë",
      category: "participation",
      rarity: "superrare",
      points: 500,
      condition: { type: "games_played", value: 100 },
      isSecret: false,
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ—á–∫–∞–º (rare-epic)
    {
      id: "score_100",
      title: "–°–æ—Ç–∫–∞",
      description: "–ù–∞–±–µ—Ä–∏—Ç–µ 100 –æ—á–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ",
      icon: "üíØ",
      category: "score",
      rarity: "rare",
      points: 50,
      condition: { type: "single_game_score", value: 100 },
      isSecret: false,
    },
    {
      id: "score_500",
      title: "–ú–∞—Å—Ç–µ—Ä –æ—á–∫–æ–≤",
      description: "–ù–∞–±–µ—Ä–∏—Ç–µ 500 –æ—á–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ",
      icon: "‚≠ê",
      category: "score",
      rarity: "superrare",
      points: 150,
      condition: { type: "single_game_score", value: 500 },
      isSecret: false,
    },
    {
      id: "score_1000",
      title: "–¢—ã—Å—è—á–Ω–∏–∫",
      description: "–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ",
      icon: "üåü",
      category: "score",
      rarity: "epic",
      points: 300,
      condition: { type: "single_game_score", value: 1000 },
      isSecret: false,
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (rare-mythic)
    {
      id: "accuracy_80",
      title: "–°–Ω–∞–π–ø–µ—Ä",
      description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 80% —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–µ —Å 10+ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
      icon: "üéØ",
      category: "accuracy",
      rarity: "rare",
      points: 75,
      condition: { type: "accuracy_in_game", value: 80, minQuestions: 10 },
      isSecret: false,
    },
    {
      id: "perfect_game",
      title: "–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞",
      description: "–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–≥—Ä–µ —Å 5+ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
      icon: "üíé",
      category: "accuracy",
      rarity: "epic",
      points: 200,
      condition: { type: "perfect_accuracy", minQuestions: 5 },
      isSecret: false,
    },
    {
      id: "perfect_streak_5",
      title: "–ù–µ–ø–æ–≥—Ä–µ—à–∏–º—ã–π",
      description: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 5 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –ø–æ–¥—Ä—è–¥",
      icon: "üî•",
      category: "streak",
      rarity: "mythic",
      points: 1000,
      condition: { type: "perfect_game_streak", value: 5 },
      isSecret: false,
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (superrare-epic)
    {
      id: "speed_demon",
      title: "–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏",
      description: "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã",
      icon: "‚ö°",
      category: "speed",
      rarity: "superrare",
      points: 100,
      condition: { type: "answer_time", value: 2000, operator: "less" },
      isSecret: false,
    },
    {
      id: "lightning_fast",
      title: "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π",
      description: "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥—ã–π",
      icon: "‚ö°‚ö°",
      category: "speed",
      rarity: "epic",
      points: 250,
      condition: { type: "fast_answers_count", value: 10, maxTime: 3000 },
      isSecret: false,
    },

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (rare-superrare)
    {
      id: "social_butterfly",
      title: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞",
      description: "–ù–∞–ø–∏—à–∏—Ç–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∏–≥—Ä",
      icon: "ü¶ã",
      category: "social",
      rarity: "rare",
      points: 75,
      condition: { type: "chat_messages", value: 50 },
      isSecret: false,
    },
    {
      id: "chat_master",
      title: "–ú–∞—Å—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è",
      description: "–ù–∞–ø–∏—à–∏—Ç–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∏–≥—Ä",
      icon: "üí¨",
      category: "social",
      rarity: "superrare",
      points: 200,
      condition: { type: "chat_messages", value: 200 },
      isSecret: false,
    },

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä (common-legendary)
    {
      id: "games_created_5",
      title: "–°–æ–∑–¥–∞—Ç–µ–ª—å",
      description: "–°–æ–∑–¥–∞–π—Ç–µ 5 –∏–≥—Ä",
      icon: "üõ†Ô∏è",
      category: "games",
      rarity: "rare",
      points: 100,
      condition: { type: "games_created", value: 5 },
      isSecret: false,
    },
    {
      id: "games_created_25",
      title: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω",
      description: "–°–æ–∑–¥–∞–π—Ç–µ 25 –∏–≥—Ä",
      icon: "üèóÔ∏è",
      category: "games",
      rarity: "epic",
      points: 500,
      condition: { type: "games_created", value: 25 },
      isSecret: false,
    },
    {
      id: "games_created_100",
      title: "–ú–∞—Å—Ç–µ—Ä-—Å–æ–∑–¥–∞—Ç–µ–ª—å",
      description: "–°–æ–∑–¥–∞–π—Ç–µ 100 –∏–≥—Ä",
      icon: "üé®",
      category: "games",
      rarity: "legendary",
      points: 2000,
      condition: { type: "games_created", value: 100 },
      isSecret: false,
    },

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (rare-superrare)
    {
      id: "night_owl",
      title: "–ü–æ–ª—É–Ω–æ—á–Ω–∏–∫",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É –º–µ–∂–¥—É 00:00 –∏ 06:00",
      icon: "ü¶â",
      category: "special",
      rarity: "rare",
      points: 50,
      condition: { type: "play_time", startHour: 0, endHour: 6 },
      isSecret: false,
    },
    {
      id: "early_bird",
      title: "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
      description: "–°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É –º–µ–∂–¥—É 05:00 –∏ 08:00",
      icon: "üê¶",
      category: "special",
      rarity: "rare",
      points: 50,
      condition: { type: "play_time", startHour: 5, endHour: 8 },
      isSecret: false,
    },

    // –ú–∞—Ä–∞—Ñ–æ–Ω—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (epic-mythic)
    {
      id: "marathon_runner",
      title: "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
      description: "–ò–≥—Ä–∞–π—Ç–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤",
      icon: "üèÉ",
      category: "special",
      rarity: "epic",
      points: 300,
      condition: { type: "continuous_play_time", value: 7200000 }, // 2 —á–∞—Å–∞ –≤ –º—Å
      isSecret: false,
    },
    {
      id: "iron_will",
      title: "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è",
      description: "–ò–≥—Ä–∞–π—Ç–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —á–∞—Å–æ–≤",
      icon: "üî©",
      category: "special",
      rarity: "mythic",
      points: 1000,
      condition: { type: "continuous_play_time", value: 18000000 }, // 5 —á–∞—Å–æ–≤ –≤ –º—Å
      isSecret: false,
    },

    // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (legendary-secret)
    {
      id: "easter_egg",
      title: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø–∞—Å—Ö–∞–ª–∫–∞–º–∏",
      description: "–ù–∞–π–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—É—é –ø–∞—Å—Ö–∞–ª–∫—É –≤ –∏–≥—Ä–µ",
      icon: "ü•ö",
      category: "special",
      rarity: "secret",
      points: 500,
      condition: { type: "easter_egg_found", value: 1 },
      isSecret: true,
    },
    {
      id: "developer_appreciation",
      title: "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
      description: "–û—Å–æ–±–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π MaxQuiz",
      icon: "‚ù§Ô∏è",
      category: "special",
      rarity: "secret",
      points: 1000,
      condition: { type: "special_action", value: "developer_thanks" },
      isSecret: true,
    },
    {
      id: "first_place_comeback",
      title: "–í–µ–ª–∏–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ",
      description: "–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É, –Ω–∞—Ö–æ–¥—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∏–≥—Ä—ã",
      icon: "üé≠",
      category: "special",
      rarity: "legendary",
      points: 750,
      condition: { type: "comeback_victory", value: 1 },
      isSecret: false,
    },

    // –°—Ç—Ä–∏–∫–∏ –∏ —Å–µ—Ä–∏–∏ (superrare-mythic)
    {
      id: "win_streak_3",
      title: "–¢—Ä–æ–π–Ω–∞—è –ø–æ–±–µ–¥–∞",
      description: "–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥",
      icon: "üî•",
      category: "streak",
      rarity: "superrare",
      points: 150,
      condition: { type: "win_streak", value: 3 },
      isSecret: false,
    },
    {
      id: "win_streak_10",
      title: "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π",
      description: "–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥",
      icon: "üëë",
      category: "streak",
      rarity: "mythic",
      points: 1500,
      condition: { type: "win_streak", value: 10 },
      isSecret: false,
    },
  ]

  static async getAllAchievements(): Promise<Achievement[]> {
    return this.achievements
  }

  static async getUserAchievements(userId: string): Promise<UserAchievements> {
    try {
      const userAchievementsDoc = await getDoc(doc(db, "user_achievements", userId))

      if (userAchievementsDoc.exists()) {
        const data = userAchievementsDoc.data()
        return {
          userId,
          achievements: data.achievements || [],
          totalPoints: data.totalPoints || 0,
          lastUpdated: data.lastUpdated || Date.now(),
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const newUserAchievements: UserAchievements = {
        userId,
        achievements: [],
        totalPoints: 0,
        lastUpdated: Date.now(),
      }

      await setDoc(doc(db, "user_achievements", userId), newUserAchievements)
      return newUserAchievements
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      return {
        userId,
        achievements: [],
        totalPoints: 0,
        lastUpdated: Date.now(),
      }
    }
  }

  static async unlockAchievement(userId: string, achievementId: string): Promise<boolean> {
    try {
      const userAchievements = await this.getUserAchievements(userId)
      const achievement = this.achievements.find((a) => a.id === achievementId)

      if (!achievement) return false

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
      if (userAchievements.achievements.some((a) => a.achievementId === achievementId)) {
        return false
      }

      const newAchievement: UserAchievement = {
        achievementId,
        unlockedAt: Date.now(),
        progress: 100,
      }

      const updatedAchievements = [...userAchievements.achievements, newAchievement]
      const updatedTotalPoints = userAchievements.totalPoints + achievement.points

      await updateDoc(doc(db, "user_achievements", userId), {
        achievements: updatedAchievements,
        totalPoints: updatedTotalPoints,
        lastUpdated: Date.now(),
      })

      return true
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error)
      return false
    }
  }

  static async checkAndUnlockAchievements(userId: string, userStats: any): Promise<string[]> {
    const unlockedAchievements: string[] = []

    try {
      for (const achievement of this.achievements) {
        const isUnlocked = await this.checkAchievementCondition(achievement, userStats)
        if (isUnlocked) {
          const success = await this.unlockAchievement(userId, achievement.id)
          if (success) {
            unlockedAchievements.push(achievement.id)
          }
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error)
    }

    return unlockedAchievements
  }

  private static async checkAchievementCondition(achievement: Achievement, userStats: any): Promise<boolean> {
    const { condition } = achievement

    try {
      switch (condition.type) {
        case "games_created":
          return userStats.gamesCreated >= condition.value
        case "games_played":
          return userStats.gamesPlayed >= condition.value
        case "correct_answers":
          return userStats.correctAnswers >= condition.value
        case "single_game_score":
          return userStats.bestScore >= condition.value
        case "accuracy_in_game":
          return userStats.bestAccuracy >= condition.value
        case "perfect_accuracy":
          return userStats.perfectGames >= 1
        case "answer_time":
          return condition.operator === "less"
            ? userStats.fastestAnswer <= condition.value
            : userStats.fastestAnswer >= condition.value
        case "chat_messages":
          return userStats.chatMessages >= condition.value
        case "win_streak":
          return userStats.currentWinStreak >= condition.value
        default:
          return false
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:", error)
      return false
    }
  }

  static getRarityColor(rarity: string): string {
    switch (rarity) {
      case "common":
        return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
      case "rare":
        return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
      case "superrare":
        return "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200"
      case "epic":
        return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
      case "mythic":
        return "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200"
      case "legendary":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
      case "secret":
        return "bg-gradient-to-r from-purple-500 to-pink-500 text-white"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  static getRarityName(rarity: string): string {
    switch (rarity) {
      case "common":
        return "–û–±—ã—á–Ω–æ–µ"
      case "rare":
        return "–†–µ–¥–∫–æ–µ"
      case "superrare":
        return "–°—É–ø–µ—Ä-—Ä–µ–¥–∫–æ–µ"
      case "epic":
        return "–≠–ø–∏—á–µ—Å–∫–æ–µ"
      case "mythic":
        return "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ"
      case "legendary":
        return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ"
      case "secret":
        return "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ"
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  static async initializeAchievements(): Promise<void> {
    try {
      const achievementsRef = collection(db, "achievements")
      const snapshot = await getDocs(achievementsRef)

      if (snapshot.empty) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for (const achievement of this.achievements) {
          await setDoc(doc(db, "achievements", achievement.id), achievement)
        }
        console.log("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error)
    }
  }
}
